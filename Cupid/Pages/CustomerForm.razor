@page "/customerform"

<PageTitle>Customer From</PageTitle>

@using Cupid.Data
@using Cupid.Models.Data
@using Cupid.Services
@inject CustomerService CustomerService
@inject PlanService PlanService

<h1>Customer From</h1>

<p>Please fill out this form for your customer profile.</p>

@if (Message is not null)
{
    <div class="@($"alert {AlertClass}")" role="alert">
        <p>@Message</p>
    </div>
}

<EditForm Model="@CustomerDataObject">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row my-2">
        <label for="firstName" class="col-sm-2 col-form-label">
            First Name
        </label>
        <div class="col-sm-10">
            <InputText id="firstName" class="form-control" placeholder="First Name"
                       @bind-Value="CustomerDataObject.FirstName" />
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="lastName" class="col-sm-2 col-form-label">
            Last Name
        </label>
        <div class="col-sm-10">
            <InputText id="lastName" class="form-control" placeholder="Last Name"
                       @bind-Value="CustomerDataObject.LastName" />
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="email" class="form-control" placeholder="Email"
                       @bind-Value="CustomerDataObject.Email" />
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="phone" class="col-sm-2 col-form-label">
            Phone
        </label>
        <div class="col-sm-10">
            <InputText id="phone" class="form-control" placeholder="Phone"
                       @bind-Value="CustomerDataObject.Phone" />
        </div>
    </div>
    <div class="form-group row my-2">
        <label for="annualincome" class="col-sm-2 col-form-label">
            Annual Income
        </label>
        <div class="col-sm-10">
            <InputNumber id="annualincome" class="form-control" placeholder="e.g 80,000 (round to thousands)"
                         @bind-Value="CustomerDataObject.AnnualIncome" />
        </div>
    </div>

    <div class="form-group row my-2">
        <h4>Plans</h4>
        <div class="col-sm-10">
            @if (Loading)
            {
                <em>Loading...</em>
            }
            @foreach (var p in Plans)
            {
                <label for="@p.Plan.PlanNumber.ToString()" class="col-sm-2 col-form-label">
                    @p.Plan.PlanName
                    <InputCheckbox id="@p.Plan.PlanNumber.ToString()" @bind-Value="p.IsSelected" />
                </label>
            }
        </div>
    </div>

    <button class="btn btn-primary" disabled="@Loading" @onclick="SubmitForm">Submit</button>
</EditForm>

@code {
    private CustomerDataObject CustomerDataObject = new();
    // TODO replace with record class with mutable IsSelected
    private class PlanData
    {
        public PlanDataObject Plan { get; init; } = default!;
        public bool IsSelected;

        public PlanData(PlanDataObject plan, bool isSelected)
        {
            Plan = plan;
            IsSelected = isSelected;
        }
    }

    private List<PlanData> Plans { get; set; } = new();

    // maybe could all go in the same tuple / record?
    private bool Error { get; set; }
    private bool Loading { get; set; }
    private string? Message { get; set; }

    private string AlertClass => Error ? "alert-danger" : "alert-success";

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        var response = await PlanService.GetPlans();

        if (response is { Value: List<PlanDataObject> list })
        {
            Plans.AddRange(list
                .Select(p => new PlanData(p, false))
                .ToList());
        }
        else if (response is { Error: false, Message: null })
        {
            Error = true;
            Message = "Issue receiving content from server";
        }
        else
        {
            (Error, Message) = (response.Error, response.Message);
        }

        Loading = false;

        await base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        Loading = true;

        CustomerDataObject.Notes ??= string.Empty;

        // there has to be a better way than this...
        CustomerDataObject.PlanNumbers = Plans
            .Select((item, index) => (item, index)) // get the index of each item
            .Where(i => i.item.IsSelected)          // filter out unselected items
            .Select(i => i.item.Plan.PlanNumber)    // get the *original* indexes after filtering
            .ToList();

        // post these information to the database
        (_, Message, Error) = await CustomerService.PostCustomer(CustomerDataObject);

        Loading = false;
    }
}