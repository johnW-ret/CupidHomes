@page "/customer"

<PageTitle>Customers</PageTitle>

@using Cupid.Models.Data
@using Cupid.Services
@inject CustomerService CustomerService

<h1>Customers</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (Message is not null)
{
    <div class="@($"alert {AlertClass}")" role="alert">
        <p>@Message</p>
    </div>
}

@if (Loading)
{
    <p><em>Loading...</em></p>
}
else if (customers is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.FormattedPhone</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<CustomerDataObject>? customers;

    private bool Error { get; set; }
    private bool Loading { get; set; }
    private string? Message { get; set; }

    private string AlertClass => Error ? "alert-danger" : "alert-success";

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        (customers, var message, Error) = await CustomerService.GetCustomers();

        if (Error)
            Message = message;

        Loading = false;
    }
}
